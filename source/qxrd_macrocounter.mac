#
# macro counter macros to run qxrd
#

global QXRD_PARS

def qxrd_cmd(mne, key, p1, p2, unit) '{
  if (QXRD_PARS["debug"]) {
    printf("qxrd_cmd(\"%s\", \"%s\", %s, %s, %s)\n", mne, key, p1, p2, unit)
  }

  if (mne == "..") {
    if (key == "prestart_all" && QXRD_PARS[sprintf("%d,enable",unit)]) {
      if (key == "prestart_all") {
        QXRD_PARS[sprintf("%d,start",unit)]=1
        if (QXRD_PARS["scanstart"]) {
          QXRD_PARS[sprintf("%d,scanstart",unit)]=1
        }

        if (QXRD_PARS["debug"]) {
          print "Prestart", QXRD_PARS
        }
      }
    }
  } else {
    unit = counter_par(mne, "unit")
    addr = counter_par(mne, "address")
    chan = counter_par(mne, "channel")

    if (QXRD_PARS[sprintf("%d,enable",unit)]) {
      if (key == "start_one") {
        QXRD_PARS["scanstart"]=0

        if (QXRD_PARS[sprintf("%d,scanstart",unit)]) {
          qxrd_scan_start_handler(mne)
          QXRD_PARS[sprintf("%d,scanstart",unit)]=0
        }

        if (QXRD_PARS[sprintf("%d,start",unit)]) {
          if (QXRD_PARS["debug"]) {
            printf ("Start acquire unit %d, addr %s\n", unit, addr)
          }

          if (addr) {
            remote_eval(addr, sprintf("exposureTime(%g);acquire()", p1))
          }
        }
        QXRD_PARS[sprintf("%d,start",unit)]=0
      } else if (key == "get_status") {
        if (QXRD_PARS["debug"]) {
          printf("get_status: ctrl %d, chan %d, addr %s\n", counter_par(mne, "unit"), counter_par(mne, "channel"), counter_par(mne, "address"))
        }
        if (addr) {
          counting = remote_eval(addr, "acquireStatus(0.1)")==0
          if (counting && QXRD_PARS["debug"]) {
            printf("Waiting for %s\n", addr)
          }
          return counting
        } else {
          return 0
        }
      } else if (key == "counts") {
        if (addr) {
          return remote_eval(addr, sprintf("acquireScalers(%g)",chan))
        } else {
          return 0;
        }
      }
    }
  }
}'

def qxrd_config(mne, type, unit, module, chan) '{
  if (mne == ".." && type == "ctrl") {
    QXRD_PARS["count"]=unit+1

    qxrd_config_unit(unit)
  }
}'

def qxrd_config_unit(unit) '{
  local i

  for (i=0; i<COUNTERS; i++) {
    ctrl = counter_par(i, "controller")
    dev  = counter_par(i, "device_id")
    n    = counter_par(i, "unit")
    if (ctrl == "MAC_CNTP" || ctrl == "MAC_CNT") {
      if (dev == "qxrd" && n == unit) {
        if (QXRD_PARS[sprintf("%d,enable",unit)]) {
          counter_par(i, "disable", 0)
        } else {
          counter_par(i, "disable", 1)
        }
      }
    }
  }
}'

def qxrd_enable(unit,enabled) '{
  if (QXRD_PARS["debug"]) {
    printf("qxrd_enable(%d,%d)\n", unit, enabled)
  }

  QXRD_PARS[sprintf("%d,enable",unit)]=enabled

  qxrd_config_unit(unit)
}'

def qxrd_on '{
  n=QXRD_PARS["count"]
  for(i=0; i<n; i++) {
    qxrd_enable(i,1)
  }
}'

def qxrd_off '{
  n=QXRD_PARS["count"]
  for(i=0; i<n; i++) {
    qxrd_enable(i,0)
  }
}'

def qxrd_setup '{
  print "Setup QXRD Detector:"
  QXRD_PARS["datadir"] = getsval("QXRD Data Directory (%s replaced by DATAFILE) ?", QXRD_PARS["datadir"])
  QXRD_PARS["scansub"] = yesno("Save data in scan-dependent subdirs?", QXRD_PARS["scansub"])
  if (QXRD_PARS["scansub"]) {
    QXRD_PARS["resetindex"] = yesno("Reset QXRD file index at start of each scan?", QXRD_PARS["resetindex"])
    QXRD_PARS["scanfmt"] = getsval("Scan-dependent subdir name (%d replaced by SCAN_N) ?", QXRD_PARS["scanfmt"])
    QXRD_PARS["scanpat"] = getsval("Scan-dependent filename (%d replaced by SCAN_N) ?", QXRD_PARS["scanpat"])
  }
  QXRD_PARS["debug"] = yesno("Extra debugging output?", QXRD_PARS["debug"])
  cdef("user_postscan_head", "qxrd_scan_head();", "qxrd", 0)
}'

def qxrd_scan_head() '{
  QXRD_PARS["scanstart"]=1
}'

def qxrd_scan_start_handler(mne) '{
  if (QXRD_PARS["debug"]) {
    printf("Start scan for unit %d, address %s\n", counter_par(mne,"unit"), counter_par(mne,"address"))
  }

  addr = counter_par(mne, "address")

  if (QXRD_PARS["scansub"]) {
    subdir = sprintf("%s/%s", sprintf(QXRD_PARS["datadir"],DATAFILE), sprintf(QXRD_PARS["scanfmt"],SCAN_N))
  } else {
    subdir = sprintf(QXRD_PARS["datadir"],DATAFILE)
  }

  if (addr) {
    if (QXRD_PARS["scansub"] && QXRD_PARS["resetindex"]) {
      if (QXRD_PARS["scanpat"]) {
        remote_eval(addr, sprintf("filePattern(\"%s\")", sprintf(QXRD_PARS["scanpat"], SCAN_N)))
      }
      remote_eval(addr, "fileIndex(0)")
    }
    remote_eval(addr, sprintf("outputDirectory(\"%s\")", subdir))
  }
}'

